# Classe base
class Musico
  attr_reader :nome, :instrumento

  def initialize(nome, instrumento)
    @nome = nome
    @instrumento = instrumento
  end

  # M√©todo abstrato ‚Äî for√ßa as subclasses a implementarem
  def tocar_partitura(peca)
    raise NotImplementedError, "A subclasse deve implementar este m√©todo!"
  end
end

# Subclasse 1
class Pianista < Musico
  def tocar_partitura(peca)
    puts "#{@nome} toca a pe√ßa '#{peca}' com paix√£o ao piano üéπ"
  end
end

# Subclasse 2
class Violinista < Musico
  def tocar_partitura(peca)
    puts "#{@nome} interpreta '#{peca}' com maestria ao violino üéª"
  end
end

# Classe Maestro
class Maestro
  attr_reader :musicos

  def initialize(musicos)
    @musicos = musicos
  end

  def iniciar_ensaio(peca)
    puts "\nüé∂ Iniciando ensaio da pe√ßa: '#{peca}' üé∂"
    @musicos.each { |m| m.tocar_partitura(peca) }  # Polimorfismo
  end

  def mudar_foco(estado)
    puts "\nMudando foco para: #{estado}"
    mensagens = @musicos.map { |m| "#{m.nome} agora est√° #{estado}!" }
    mensagens.each { |msg| puts msg }
  end
end


# Criando m√∫sicos
p1 = Pianista.new("Kousei", "Piano")
v1 = Violinista.new("Kaori", "Violino")

# Criando maestro com lista de m√∫sicos
maestro = Maestro.new([p1, v1])

# Pegando nome da pe√ßa via input
puts "Digite o nome da pe√ßa a ser ensaiada:"
peca = gets.chomp

# Execu√ß√£o
maestro.iniciar_ensaio(peca)
maestro.mudar_foco("Concentrado")
